/* Code generated by github.com/srdtrk/go-codegen, DO NOT EDIT. */
package schema

// Instantiate messages
type InstantiateMsg struct {
	// The limits of the bucket.
	Limits BucketLimits `json:"limits"`
	// The configuration for paginated query.
	Pagination PaginationConfig `json:"pagination"`
	// The name of the bucket. The name could not be empty or contains whitespaces. If name contains whitespace, they will be removed.
	Bucket string `json:"bucket"`
	// The configuration of the bucket.
	Config BucketConfig `json:"config"`
}

// Execute messages
type ExecuteMsg struct {
	/*
	   StoreObject store an object to the bucket and make the sender the owner of the object. The object is referenced by the hash of its content and this value is returned. If the object is already stored, it is a no-op. It may be pinned though.

	   The "pin" parameter specifies whether the object should be pinned for the sender. Pinning an object ensures it is protected from being removed from storage, making it persistent and guaranteeing its indefinite accessibility. Itâ€™s important to note that pinning is optional; objects can be stored without pinning. However, be aware that non-pinned objects can be removed from the storage by anyone at any time, making them no longer accessible.

	   The "compression_algorithm" parameter specifies the algorithm for compressing the object before storing it in the storage, which is optional. If no algorithm is specified, the algorithm used is the first algorithm of the bucket configuration limits. Note that the chosen algorithm can save storage space, but it will increase CPU usage. Depending on the chosen compression algorithm and the achieved compression ratio, the gas cost of the operation will vary, either increasing or decreasing.
	*/
	StoreObject *ExecuteMsg_StoreObject `json:"store_object,omitempty"`
	// ForgetObject first unpins the object from the bucket for the sender, then removes it from storage if it is no longer pinned by anyone. If the object is still pinned by other senders, it is not removed from storage and an error is returned. If the object is not pinned for the sender, this operation is a no-op.
	ForgetObject *ExecuteMsg_ForgetObject `json:"forget_object,omitempty"`
	// PinObject pins the object in the bucket for the sender. If the object is already pinned for the sender, this operation is a no-op. While an object is pinned, it cannot be removed from storage.
	PinObject *ExecuteMsg_PinObject `json:"pin_object,omitempty"`
	// UnpinObject unpins the object in the bucket for the sender. If the object is not pinned for the sender, this operation is a no-op. The object can be removed from storage if it is no longer pinned by anyone.
	UnpinObject *ExecuteMsg_UnpinObject `json:"unpin_object,omitempty"`
}

// Query messages
type QueryMsg struct {
	// Bucket returns the bucket information.
	Bucket *QueryMsg_Bucket `json:"bucket,omitempty"`
	// Object returns the object information with the given id.
	Object *QueryMsg_Object `json:"object,omitempty"`
	// Objects returns the list of objects in the bucket with support for pagination.
	Objects *QueryMsg_Objects `json:"objects,omitempty"`
	// ObjectData returns the content of the object with the given id.
	ObjectData *QueryMsg_ObjectData `json:"object_data,omitempty"`
	// ObjectPins returns the list of addresses that pinned the object with the given id with support for pagination.
	ObjectPins *QueryMsg_ObjectPins `json:"object_pins,omitempty"`
}

/*
BucketConfig is the type of the configuration of a bucket.

The configuration is set at the instantiation of the bucket, and is immutable and cannot be changed. The configuration is optional and if not set, the default configuration is used.
*/
type BucketConfig struct {
	/*
	   The acceptable compression algorithms for the objects in the bucket. If this parameter is not set, then all compression algorithms are accepted. If this parameter is set, then only the compression algorithms in the array are accepted.

	   When an object is stored in the bucket without a specified compression algorithm, the first algorithm in the array is used. Therefore, the order of the algorithms in the array is significant. Typically, the most efficient compression algorithm, such as the NoCompression algorithm, should be placed first in the array.

	   Any attempt to store an object using a different compression algorithm than the ones specified here will fail.
	*/
	AcceptedCompressionAlgorithms []CompressionAlgorithm `json:"accepted_compression_algorithms"`
	/*
	   The algorithm used to hash the content of the objects to generate the id of the objects. The algorithm is optional and if not set, the default algorithm is used.

	   The default algorithm is Sha256 if not set.
	*/
	HashAlgorithm HashAlgorithm `json:"hash_algorithm"`
}

/*
CompressionAlgorithm is an enumeration that defines the different compression algorithms supported for compressing the content of objects. The compression algorithm specified here are relevant algorithms for compressing data on-chain, which means that they are fast to compress and decompress, and have a low computational cost.

The order of the compression algorithms is based on their estimated computational cost (quite opinionated) during both compression and decompression, ranging from the lowest to the highest. This particular order is utilized to establish the default compression algorithm for storing an object.
*/
type CompressionAlgorithm string

const (
	// Represents no compression algorithm. The object is stored as is without any compression.
	CompressionAlgorithm_Passthrough CompressionAlgorithm = "passthrough"
	/*
	   Represents the Snappy algorithm. Snappy is a compression/decompression algorithm that does not aim for maximum compression. Instead, it aims for very high speeds and reasonable compression.

	   See [the snappy web page](https://google.github.io/snappy/) for more information.
	*/
	CompressionAlgorithm_Snappy CompressionAlgorithm = "snappy"
	/*
	   Represents the LZMA algorithm. LZMA is a lossless data compression/decompression algorithm that features a high compression ratio and a variable compression-dictionary size up to 4 GB.

	   See [the LZMA wiki page](https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Markov_chain_algorithm) for more information.
	*/
	CompressionAlgorithm_Lzma CompressionAlgorithm = "lzma"
)

type ExecuteMsg_UnpinObject struct {
	Id string `json:"id"`
}

type QueryMsg_ObjectData struct {
	// The id of the object to get.
	Id string `json:"id"`
}

// ObjectPinsResponse is the response of the GetObjectPins query.
type ObjectPinsResponse struct {
	// The list of addresses that pinned the object.
	Data []string `json:"data"`
	// The page information.
	PageInfo PageInfo `json:"page_info"`
}

/*
PaginationConfig is the type carrying configuration for paginated queries.

The fields are optional and if not set, there is a default configuration.
*/
type PaginationConfig struct {
	/*
	   The default number of elements in a page.

	   Shall be less or equal than `max_page_size`. Default to '10' if not set.
	*/
	DefaultPageSize int `json:"default_page_size"`
	/*
	   The maximum elements a page can contain.

	   Shall be less than `u32::MAX - 1`. Default to '30' if not set.
	*/
	MaxPageSize int `json:"max_page_size"`
}

type QueryMsg_Bucket struct{}

// ObjectsResponse is the response of the Objects query.
type ObjectsResponse struct {
	// The list of objects in the bucket.
	Data []ObjectResponse `json:"data"`
	// The page information.
	PageInfo PageInfo `json:"page_info"`
}

// BucketStat is the type of the statistics of a bucket.
type BucketStat struct {
	// The total size of the objects contained in the bucket after compression.
	CompressedSize Uint128 `json:"compressed_size"`
	// The number of objects in the bucket.
	ObjectCount Uint128 `json:"object_count"`
	// The total size of the objects contained in the bucket.
	Size Uint128 `json:"size"`
}

// BucketResponse is the response of the Bucket query.
type BucketResponse struct {
	// The configuration of the bucket.
	Config BucketConfig `json:"config"`
	// The limits of the bucket.
	Limits BucketLimits `json:"limits"`
	// The name of the bucket.
	Name string `json:"name"`
	// The configuration for paginated query.
	Pagination PaginationConfig `json:"pagination"`
	// The statistics of the bucket.
	Stat BucketStat `json:"stat"`
}

/*
BucketLimits is the type of the limits of a bucket.

The limits are optional and if not set, there is no limit.
*/
type BucketLimits struct {
	// The maximum number of pins in the bucket for an object.
	MaxObjectPins *Uint128 `json:"max_object_pins,omitempty"`
	// The maximum size of the objects in the bucket.
	MaxObjectSize *Uint128 `json:"max_object_size,omitempty"`
	// The maximum number of objects in the bucket.
	MaxObjects *Uint128 `json:"max_objects,omitempty"`
	// The maximum total size of the objects in the bucket.
	MaxTotalSize *Uint128 `json:"max_total_size,omitempty"`
}

// HashAlgorithm is an enumeration that defines the different hash algorithms supported for hashing the content of objects.
type HashAlgorithm string

const (
	/*
	   Represents the MD5 algorithm. MD5 is a widely used cryptographic hash function that produces a 128-bit hash value. The computational cost of MD5 is relatively low compared to other hash functions, but its short hash length makes it easier to find hash collisions. It is now considered insecure for cryptographic purposes, but can still used in non-security contexts.

	   MD5 hashes are stored on-chain as 32 hexadecimal characters.

	   See [the MD5 Wikipedia page](https://en.wikipedia.org/wiki/MD5) for more information.
	*/
	HashAlgorithm_MD5 HashAlgorithm = "m_d5"
	/*
	   Represents the SHA-224 algorithm. SHA-224 is a variant of the SHA-2 family of hash functions that produces a 224-bit hash value. It is similar to SHA-256, but with a shorter output size. The computational cost of SHA-224 is moderate, and its relatively short hash length makes it easier to store and transmit.

	   SHA-224 hashes are stored on-chain as 56 hexadecimal characters.

	   See [the SHA-2 Wikipedia page](https://en.wikipedia.org/wiki/SHA-2) for more information.
	*/
	HashAlgorithm_Sha224 HashAlgorithm = "sha224"
	/*
	   Represents the SHA-256 algorithm. SHA-256 is a member of the SHA-2 family of hash functions that produces a 256-bit hash value. It is widely used in cryptography and other security-related applications. The computational cost of SHA-256 is moderate, and its hash length strikes a good balance between security and convenience.

	   SHA-256 hashes are stored on-chain as 64 hexadecimal characters.

	   See [the SHA-2 Wikipedia page](https://en.wikipedia.org/wiki/SHA-2) for more information.
	*/
	HashAlgorithm_Sha256 HashAlgorithm = "sha256"
	/*
	   Represents the SHA-384 algorithm. SHA-384 is a variant of the SHA-2 family of hash functions that produces a 384-bit hash value. It is similar to SHA-512, but with a shorter output size. The computational cost of SHA-384 is relatively high, but its longer hash length provides better security against hash collisions.

	   SHA-384 hashes are stored on-chain as 96 hexadecimal characters.

	   See [the SHA-2 Wikipedia page](https://en.wikipedia.org/wiki/SHA-2) for more information.
	*/
	HashAlgorithm_Sha384 HashAlgorithm = "sha384"
	/*
	   Represents the SHA-512 algorithm. SHA-512 is a member of the SHA-2 family of hash functions that produces a 512-bit hash value. It is widely used in cryptography and other security-related applications. The computational cost of SHA-512 is relatively high, but its longer hash length provides better security against hash collisions.

	   SHA-512 hashes are stored on-chain as 128 hexadecimal characters.

	   See [the SHA-2 Wikipedia page](https://en.wikipedia.org/wiki/SHA-2) for more information.
	*/
	HashAlgorithm_Sha512 HashAlgorithm = "sha512"
)

type ExecuteMsg_ForgetObject struct {
	Id string `json:"id"`
}

/*
Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.

This is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.
*/
type Binary string

// PageInfo is the page information returned for paginated queries.
type PageInfo struct {
	// The cursor to the next page.
	Cursor string `json:"cursor"`
	// Tells if there is a next page.
	HasNextPage bool `json:"has_next_page"`
}

// ObjectResponse is the response of the Object query.
type ObjectResponse struct {
	// The size of the object when compressed. If the object is not compressed, the value is the same as `size`.
	CompressedSize Uint128 `json:"compressed_size"`
	// The compression algorithm used to compress the content of the object.
	CompressionAlgorithm CompressionAlgorithm `json:"compression_algorithm"`
	// The id of the object.
	Id string `json:"id"`
	// Tells if the object is pinned by at least one address.
	IsPinned bool `json:"is_pinned"`
	// The owner of the object.
	Owner string `json:"owner"`
	// The size of the object.
	Size Uint128 `json:"size"`
}

/*
A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.

# Examples

Use `from` to create instances of this and `u128` to get the value out:

``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);

let b = Uint128::from(42u64); assert_eq!(b.u128(), 42);

let c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```
*/
type Uint128 string

type ExecuteMsg_StoreObject struct {
	// Specifies the compression algorithm to use when storing the object. If None, the first algorithm specified in the list of accepted compression algorithms of the bucket is used (see [BucketLimits::accepted_compression_algorithms]).
	CompressionAlgorithm *CompressionAlgorithm `json:"compression_algorithm,omitempty"`
	// The content of the object to store.
	Data Binary `json:"data"`
	// Specifies whether the object should be pinned for the sender. Pinning ensures the object remains persistent and cannot be removed from storage by anyone.
	Pin bool `json:"pin"`
}

type ExecuteMsg_PinObject struct {
	Id string `json:"id"`
}

type QueryMsg_Object struct {
	// The id of the object to get.
	Id string `json:"id"`
}

type QueryMsg_Objects struct {
	// The owner of the objects to get.
	Address *string `json:"address,omitempty"`
	// The point in the sequence to start returning objects.
	After *string `json:"after,omitempty"`
	// The number of objects to return.
	First *int `json:"first,omitempty"`
}

type QueryMsg_ObjectPins struct {
	// The point in the sequence to start returning pins.
	After *string `json:"after,omitempty"`
	// The number of pins to return.
	First *int `json:"first,omitempty"`
	// The id of the object to get the pins for.
	Id string `json:"id"`
}
