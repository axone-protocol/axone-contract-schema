/* Code generated by github.com/srdtrk/go-codegen, DO NOT EDIT. */
package schema

// Instantiate message
type InstantiateMsg struct {
	// The Prolog program carrying law rules and facts.
	Program Binary `json:"program"`
	// The `axone-objectarium` contract address on which to store the law program.
	StorageAddress string `json:"storage_address"`
}

// Execute messages
type ExecuteMsg struct {
	/*
	   Break the stone making this contract unusable, by clearing all the related resources: - Unpin all the pinned objects on `axone-objectarium` contracts, if any. - Forget the main program (i.e. or at least unpin it).

	   Only the creator address (the address that instantiated the contract) is authorized to invoke this message. If already broken, this is a no-op.
	*/
	BreakStone *ExecuteMsg_BreakStone `json:"break_stone,omitempty"`
}

// Query messages
type QueryMsg struct {
	/*
	   Submits a Prolog query string to the `Logic` module, evaluating it against the law program associated with this contract.

	   If the law stone is broken the query returns a response with the error `error(system_error(broken_law_stone),root)` set in the `answer` field.
	*/
	Ask *QueryMsg_Ask `json:"ask,omitempty"`
	/*
	   Retrieves the location metadata of the law program bound to this contract.

	   This includes the contract address of the `objectarium` and the program object ID, where the law program's code can be accessed.
	*/
	Program *QueryMsg_Program `json:"program,omitempty"`
	/*
	   Fetches the raw code of the law program tied to this contract.

	   If the law stone is broken, the query may fail if the program is no longer available in the `Objectarium`.
	*/
	ProgramCode *QueryMsg_ProgramCode `json:"program_code,omitempty"`
}

type AskResponse struct {
	UserOutput *string `json:"user_output,omitempty"`
	Answer *Answer `json:"answer,omitempty"`
	GasUsed int `json:"gas_used"`
	Height int `json:"height"`
}

type ExecuteMsg_BreakStone struct{}

// ProgramResponse carry elements to locate the program in a `axone-objectarium` contract.
type ProgramResponse struct {
	// The program object id in the `axone-objectarium` contract.
	ObjectId string `json:"object_id"`
	// The `axone-objectarium` contract address on which the law program is stored.
	StorageAddress string `json:"storage_address"`
}

type QueryMsg_Program struct{}

type QueryMsg_ProgramCode struct{}

type Answer struct {
	HasMore bool `json:"has_more"`
	Results []Result `json:"results"`
	Variables []string `json:"variables"`
}

type Result struct {
	Error *string `json:"error,omitempty"`
	Substitutions []Substitution `json:"substitutions"`
}

type Substitution struct {
	Expression string `json:"expression"`
	Variable string `json:"variable"`
}

/*
Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.

This is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.
*/
type Binary string

type QueryMsg_Ask struct {
	Query string `json:"query"`
}
