{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "`ExecuteMsg` defines the set of possible actions that can be performed on the dataverse.\n\nThis enum provides variants for registering services, datasets, and other operations related to the dataverse.",
  "oneOf": [
    {
      "title": "RegisterService",
      "description": "Registers a new Service within the dataverse.\n\nThe term 'Service' in this context is employed to denote any form of service that is accessible over a network. This encompasses, but is not limited to, services such as REST APIs, gRPC services, and similar network-based services.\n\nA fundamental characteristic of each service is its unique Uniform Resource Identifier (URI), which serves as the definitive entry point for accessing the service. This URI is pivotal in the identification and location of the service within the network.",
      "type": "object",
      "required": [
        "register_service"
      ],
      "properties": {
        "register_service": {
          "type": "object",
          "required": [
            "identifier",
            "identity"
          ],
          "properties": {
            "identifier": {
              "description": "The URI that identifies and locates the service.\n\nThe URI serves a dual purpose: 1. **Identification**: It provides a unique identifier for the service, ensuring that each service can be distinctly recognized within the dataverse. 2. **Endpoint**: The URI acts as the access point or endpoint for the service. It specifies where the service can be accessed and how interactions with the service should be initiated.",
              "type": "string"
            },
            "identity": {
              "description": "The decentralized identity (DID) of the service.\n\nPreconditions: - The identity must be unique within the dataverse.",
              "type": "string"
            },
            "registrar": {
              "description": "The URI of the entity responsible for registering and managing the service in the dataverse (i.e. on the blockchain). It's an optional field, if not provided the service is registered by the entity that invokes the transaction.",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "title": "RegisterDigitalResource",
      "description": "Registers a new digital resource within the dataverse.\n\nA Digital Resource represents a broad category encompassing various digital entities registerable in the dataverse. This category includes, but is not limited to, datasets, algorithms, machine learning models, and other digital assets.\n\nThe unique identification of each Digital Resource is achieved through a combination of its Uniform Resource Identifier (URI) and the specific service responsible for its provision. This dual-component identification mechanism guarantees the distinct recognition and operationalization of each Digital Resource within the dataverse environment.",
      "type": "object",
      "required": [
        "register_digital_resource"
      ],
      "properties": {
        "register_digital_resource": {
          "type": "object",
          "required": [
            "identifier",
            "identity",
            "provided_by"
          ],
          "properties": {
            "identifier": {
              "description": "The URI that identifies the resource. This URI makes sense only in the context of the service that provides the resource.\n\nPreconditions: - The URI must be unique within the dataverse.",
              "type": "string"
            },
            "identity": {
              "description": "The decentralized identity (DID) of the Digital Resource.\n\nPreconditions: - The identity must be unique within the dataverse.",
              "type": "string"
            },
            "provided_by": {
              "description": "The URI of the service, already registered in the dataverse, that provides the resource.\n\nPreconditions: - The Service must be registered in the dataverse before the resource can be registered.",
              "type": "string"
            },
            "registrar": {
              "description": "The URI of the entity responsible for registering and managing the resource in the dataverse (i.e. on the blockchain). It's an optional field, if not provided the resource is registered by the entity that invokes the transaction.",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "title": "FoundZone",
      "description": "Founds a new zone within the dataverse.\n\n`Zone` is a conceptual framework that is established based on a set of rules, within which recognized Resources must conform, considering associated consents.",
      "type": "object",
      "required": [
        "found_zone"
      ],
      "properties": {
        "found_zone": {
          "type": "object",
          "required": [
            "identity"
          ],
          "properties": {
            "identity": {
              "description": "The decentralized identity (DID) of the Zone. This identity must be unique within the dataverse.",
              "type": "string"
            },
            "registrar": {
              "description": "The URI of the entity responsible for registering and managing the zone in the dataverse (i.e. on the blockchain). It's an optional field, if not provided the zone is registered by the entity that invokes the transaction.",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "title": "SubmitClaims",
      "description": "Submits new claims about a resource to the dataverse.\n\nA claim is a statement made by an entity, the issuer (e.g. a person, an organization, or a machine) about a resource (e.g. an entity, a service, or a zone) that the issuer asserts to be true.\n\nThe claims are submitted to the dataverse in the form of Verifiable Presentations (VPs), which combine and present credentials. The data in the presentation concerns usually the same subject, but there is no limit to the number of subjects or issuers in the data.\n\nPreconditions: - The claims must be submitted in the form of Verifiable Presentations (VPs). - The subjects of the Verifiable Credentials must exist in the dataverse before the claims can be submitted. - The identifiers of the Veriable Credentials must be unique within the dataverse. - The claims must be signed by the issuer and the signature must be verifiable.",
      "type": "object",
      "required": [
        "submit_claims"
      ],
      "properties": {
        "submit_claims": {
          "type": "object",
          "required": [
            "metadata"
          ],
          "properties": {
            "format": {
              "description": "RDF format in which the metadata is represented. If not provided, the default format is [Turtle](https://www.w3.org/TR/turtle/) format.",
              "anyOf": [
                {
                  "$ref": "#/definitions/RdfFormat"
                },
                {
                  "type": "null"
                }
              ]
            },
            "metadata": {
              "description": "The serialized metadata intended for attachment. This metadata should adhere to the format specified in the `format` field.",
              "allOf": [
                {
                  "$ref": "#/definitions/Binary"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "title": "RevokeClaims",
      "description": "Revoke or withdraw a previously submitted claims.\n\nPreconditions: - The identifier of the claims must exist in the dataverse.",
      "type": "object",
      "required": [
        "revoke_claims"
      ],
      "properties": {
        "revoke_claims": {
          "type": "object",
          "required": [
            "identifier"
          ],
          "properties": {
            "identifier": {
              "description": "The unique identifier of the claims to be revoked.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "RdfFormat": {
      "title": "RdfFormat",
      "description": "`RdfFormat` represents the various serialization formats for RDF (Resource Description Framework) data.",
      "oneOf": [
        {
          "title": "RdfXml",
          "description": "RDF/XML Format\n\nRDF/XML is a syntax to express RDF information in XML. See the [official RDF/XML specification](https://www.w3.org/TR/rdf-syntax-grammar/).",
          "type": "string",
          "enum": [
            "rdf_xml"
          ]
        },
        {
          "title": "Turtle",
          "description": "Turtle (Terse RDF Triple Language) Format\n\nTurtle is a textual format for representing RDF triples in a more compact and human-readable way compared to RDF/XML. See the [official Turtle specification](https://www.w3.org/TR/turtle/).",
          "type": "string",
          "enum": [
            "turtle"
          ]
        },
        {
          "title": "NTriples",
          "description": "N-Triples Format\n\nN-Triples is a line-based, plain text format for encoding an RDF graph. Each line corresponds to a single RDF triple. See the [official N-Triples specification](https://www.w3.org/TR/n-triples/).",
          "type": "string",
          "enum": [
            "n_triples"
          ]
        },
        {
          "title": "NQuads",
          "description": "N-Quads Format\n\nN-Quads is an extension of N-Triples to support RDF datasets by adding an optional fourth element to represent the graph name. See the [official N-Quads specification](https://www.w3.org/TR/n-quads/).",
          "type": "string",
          "enum": [
            "n_quads"
          ]
        }
      ]
    }
  }
}
