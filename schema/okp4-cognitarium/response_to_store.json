{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "StoreResponse",
  "description": "Contains information related to triple store.",
  "type": "object",
  "required": [
    "limits",
    "owner",
    "stat"
  ],
  "properties": {
    "limits": {
      "description": "The store limits.",
      "allOf": [
        {
          "$ref": "#/definitions/StoreLimits"
        }
      ]
    },
    "owner": {
      "description": "The store owner.",
      "type": "string"
    },
    "stat": {
      "description": "The store current usage.",
      "allOf": [
        {
          "$ref": "#/definitions/StoreStat"
        }
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "StoreLimits": {
      "title": "StoreLimits",
      "description": "Contains limitations regarding store usages.",
      "type": "object",
      "required": [
        "max_byte_size",
        "max_insert_data_byte_size",
        "max_insert_data_triple_count",
        "max_query_limit",
        "max_query_variable_count",
        "max_triple_byte_size",
        "max_triple_count"
      ],
      "properties": {
        "max_byte_size": {
          "description": "The maximum number of bytes the store can contain. The size of a triple is counted as the sum of the size of its subject, predicate and object, including the size of data types and language tags if any.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "max_insert_data_byte_size": {
          "description": "The maximum number of bytes an insert data query can contain.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "max_insert_data_triple_count": {
          "description": "The maximum number of triples an insert data query can contain (after parsing).",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "max_query_limit": {
          "description": "The maximum limit of a query, i.e. the maximum number of triples returned by a select query.",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "max_query_variable_count": {
          "description": "The maximum number of variables a query can select.",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "max_triple_byte_size": {
          "description": "The maximum number of bytes the store can contain for a single triple. The size of a triple is counted as the sum of the size of its subject, predicate and object, including the size of data types and language tags if any. The limit is used to prevent storing very large triples, especially literals.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "max_triple_count": {
          "description": "The maximum number of triples the store can contain.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "StoreStat": {
      "title": "StoreStat",
      "description": "Contains usage information about the triple store.",
      "type": "object",
      "required": [
        "byte_size",
        "namespace_count",
        "triple_count"
      ],
      "properties": {
        "byte_size": {
          "description": "The total triple size in the store, in bytes.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "namespace_count": {
          "description": "The total number of IRI namespace present in the store.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "triple_count": {
          "description": "The total number of triple present in the store.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
