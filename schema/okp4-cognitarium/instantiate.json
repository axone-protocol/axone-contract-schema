{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "description": "Instantiate message",
  "type": "object",
  "properties": {
    "limits": {
      "description": "Limitations regarding store usage.",
      "default": {
        "max_byte_size": "340282366920938463463374607431768211455",
        "max_insert_data_byte_size": "340282366920938463463374607431768211455",
        "max_insert_data_triple_count": "340282366920938463463374607431768211455",
        "max_query_limit": 30,
        "max_query_variable_count": 30,
        "max_triple_byte_size": "340282366920938463463374607431768211455",
        "max_triple_count": "340282366920938463463374607431768211455"
      },
      "allOf": [
        {
          "$ref": "#/definitions/StoreLimitsInput"
        }
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "StoreLimitsInput": {
      "title": "StoreLimitsInput",
      "description": "Contains requested limitations regarding store usages.",
      "type": "object",
      "properties": {
        "max_byte_size": {
          "description": "The maximum number of bytes the store can contain. The size of a triple is counted as the sum of the size of its subject, predicate and object, including the size of data types and language tags if any. Default to [Uint128::MAX] if not set, which can be considered as no limit.",
          "default": "340282366920938463463374607431768211455",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "max_insert_data_byte_size": {
          "description": "The maximum number of bytes an insert data query can contain. Default to [Uint128::MAX] if not set, which can be considered as no limit.",
          "default": "340282366920938463463374607431768211455",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "max_insert_data_triple_count": {
          "description": "The maximum number of triples an insert data query can contain (after parsing). Default to [Uint128::MAX] if not set, which can be considered as no limit.",
          "default": "340282366920938463463374607431768211455",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "max_query_limit": {
          "description": "The maximum limit of a query, i.e. the maximum number of triples returned by a select query. Default to 30 if not set.",
          "default": 30,
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "max_query_variable_count": {
          "description": "The maximum number of variables a query can select. Default to 30 if not set.",
          "default": 30,
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "max_triple_byte_size": {
          "description": "The maximum number of bytes the store can contain for a single triple. The size of a triple is counted as the sum of the size of its subject, predicate and object, including the size of data types and language tags if any. The limit is used to prevent storing very large triples, especially literals. Default to [Uint128::MAX] if not set, which can be considered as no limit.",
          "default": "340282366920938463463374607431768211455",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "max_triple_count": {
          "description": "The maximum number of triples the store can contain. Default to [Uint128::MAX] if not set, which can be considered as no limit.",
          "default": "340282366920938463463374607431768211455",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
