{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ObjectsResponse",
  "description": "ObjectsResponse is the response of the Objects query.",
  "type": "object",
  "required": [
    "data",
    "page_info"
  ],
  "properties": {
    "data": {
      "description": "The list of objects in the bucket.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ObjectResponse"
      }
    },
    "page_info": {
      "description": "The page information.",
      "allOf": [
        {
          "$ref": "#/definitions/PageInfo"
        }
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "CompressionAlgorithm": {
      "description": "CompressionAlgorithm is an enumeration that defines the different compression algorithms supported for compressing the content of objects. The compression algorithm specified here are relevant algorithms for compressing data on-chain, which means that they are fast to compress and decompress, and have a low computational cost.\n\nThe order of the compression algorithms is based on their estimated computational cost (quite opinionated) during both compression and decompression, ranging from the lowest to the highest. This particular order is utilized to establish the default compression algorithm for storing an object.",
      "oneOf": [
        {
          "title": "Passthrough",
          "description": "Represents no compression algorithm. The object is stored as is without any compression.",
          "type": "string",
          "enum": [
            "passthrough"
          ]
        },
        {
          "title": "Snappy",
          "description": "Represents the Snappy algorithm. Snappy is a compression/decompression algorithm that does not aim for maximum compression. Instead, it aims for very high speeds and reasonable compression.\n\nSee [the snappy web page](https://google.github.io/snappy/) for more information.",
          "type": "string",
          "enum": [
            "snappy"
          ]
        }
      ]
    },
    "ObjectResponse": {
      "title": "ObjectResponse",
      "description": "ObjectResponse is the response of the Object query.",
      "type": "object",
      "required": [
        "compressed_size",
        "compression_algorithm",
        "id",
        "is_pinned",
        "owner",
        "size"
      ],
      "properties": {
        "compressed_size": {
          "description": "The size of the object when compressed. If the object is not compressed, the value is the same as `size`.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "compression_algorithm": {
          "description": "The compression algorithm used to compress the content of the object.",
          "allOf": [
            {
              "$ref": "#/definitions/CompressionAlgorithm"
            }
          ]
        },
        "id": {
          "description": "The id of the object.",
          "type": "string"
        },
        "is_pinned": {
          "description": "Tells if the object is pinned by at least one address.",
          "type": "boolean"
        },
        "owner": {
          "description": "The owner of the object.",
          "type": "string"
        },
        "size": {
          "description": "The size of the object.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "PageInfo": {
      "title": "PageInfo",
      "description": "PageInfo is the page information returned for paginated queries.",
      "type": "object",
      "required": [
        "cursor",
        "has_next_page"
      ],
      "properties": {
        "cursor": {
          "description": "The cursor to the next page.",
          "type": "string"
        },
        "has_next_page": {
          "description": "Tells if there is a next page.",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
